// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name TruID
import AVFoundation
import Accelerate
import CoreGraphics
import CoreImage
import CoreLocation
import CoreMedia
import DeveloperToolsSupport
import Foundation
import QuartzCore
import Swift
import SwiftUI
@_exported import TruID
import UIKit
import VideoToolbox
import Vision
import _Concurrency
import _MapKit_SwiftUI
import _StringProcessing
import _SwiftConcurrencyShims
public enum FingersToScan : Swift.CaseIterable {
  case LEFT_4
  case RIGHT_4
  case RIGHT_THUMB
  case LEFT_THUMB
  case LEFT_4_RIGHT_4
  public static func == (a: TruID.FingersToScan, b: TruID.FingersToScan) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [TruID.FingersToScan]
  public static var allCases: [TruID.FingersToScan] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.Bundle {
  public class func current(dsoHandle: Swift.UnsafeRawPointer = #dsohandle) -> Foundation.Bundle
}
public struct ResponseResult : Swift.Codable {
  public let status: Swift.String
  public let confidence: Swift.Double
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FaceLivenessMetrics : Swift.Codable {
  public let backgroundUniformity: Swift.String
  public let shadowSymmetry: Swift.String
  public let appropriateLighting: Swift.String
  public let appropriateExposure: Swift.String
  public let colorNeutrality: Swift.String
  public let expressionNeutrality: Swift.String
  public let foreignObjectsAbsence: Swift.String
  public let lookingStraight: Swift.String
  public let faceAlignment: Swift.String
  public let openEyes: Swift.String
  public let eyeVisibility: Swift.String
  public let faceFeaturesVisibility: Swift.String
  public let glasses: Swift.String
  public let sunGlasses: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ResponseModel : Swift.Codable {
  public let status: Swift.Int
  public let icaoStatus: Swift.String?
  public let error: Swift.String?
  public let result: TruID.ResponseResult?
  public let faceQualityChecks: TruID.FaceLivenessMetrics?
  public let incompatibleCamera: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TruIDResult {
  public let responseModel: TruID.ResponseModel
  public let image: UIKit.UIImage
}
public enum FailureCases {
  case userCanceled
  case networkError
  case timedOut
  case jsonDecodingFailed
  case unableToAccessLocation
  case systemCanceled
  case noSessionResult
  case validationErrorFromServer
  case sessionExpired
  case cannotLoadModels
  public var message: Swift.String {
    get
  }
  public static func == (a: TruID.FailureCases, b: TruID.FailureCases) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let modelName: Swift.String
}
public protocol CGSizePreferenceKey : SwiftUI.PreferenceKey where Self.Value == CoreFoundation.CGSize {
}
extension TruID.CGSizePreferenceKey {
  public static func reduce(value _: inout CoreFoundation.CGSize, nextValue: () -> CoreFoundation.CGSize)
}
extension SwiftUI.View {
  public func onSizeChanged<Key>(_ key: Key.Type, perform action: @escaping (CoreFoundation.CGSize) -> Swift.Void) -> some SwiftUI.View where Key : TruID.CGSizePreferenceKey
  
}
@_Concurrency.MainActor(unsafe) public struct TruidMain : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(API_URL: Swift.String = "https://face-api.truid.ai", face_liveness: Swift.Bool = true, enableHelpScreens: Swift.Bool = true, enableReportScreen: Swift.Bool = true, themeColor: SwiftUI.Color = Color(UIColor(red: 200/255, green: 100/255, blue: 200/255, alpha: 1.0)), success: @escaping (TruID.TruIDResult) -> Swift.Void, failure: @escaping (TruID.FailureCases) -> Swift.Void)
  public typealias Body = @_opaqueReturnTypeOf("$s5TruID9TruidMainV4bodyQrvp", 0) __
}
extension TruID.FingersToScan : Swift.Equatable {}
extension TruID.FingersToScan : Swift.Hashable {}
extension TruID.FailureCases : Swift.Equatable {}
extension TruID.FailureCases : Swift.Hashable {}
