// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name TruID
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import Accelerate
import CommonCrypto
import CoreFoundation
import CoreGraphics
import CoreImage
import CoreLocation
import CoreMedia
import CoreVideo
import DeveloperToolsSupport
import Foundation
import MapKit
import QuartzCore
import Swift
import SwiftUI
@_exported import TruID
import UIKit
import VideoToolbox
import Vision
import _Concurrency
import _MapKit_SwiftUI
import _StringProcessing
import _SwiftConcurrencyShims
public enum FingersToScan : Swift.CaseIterable {
  case LEFT_4
  case RIGHT_4
  case RIGHT_THUMB
  case LEFT_THUMB
  case LEFT_4_RIGHT_4
  public static func == (a: TruID.FingersToScan, b: TruID.FingersToScan) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [TruID.FingersToScan]
  nonisolated public static var allCases: [TruID.FingersToScan] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.Bundle {
  public class func current(dsoHandle: Swift.UnsafeRawPointer = #dsohandle) -> Foundation.Bundle
}
public enum StatusValue : Swift.Codable {
  case string(Swift.String)
  case bool(Swift.Bool)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public var value: Swift.Bool {
    get
  }
}
public struct ReportStep : Swift.Codable {
  public let status: TruID.StatusValue?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ExtractedData : Swift.Codable {
  public let Name: Swift.String?
  public let Gender: Swift.String?
  public let FatherName: Swift.String?
  public let DateOfBirth: Swift.String?
  public let DateOfIssue: Swift.String?
  public let DateOfExpiry: Swift.String?
  public let IdentityNumber: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DocumentCaptureReport : Swift.Codable {
  public let extracted_data: TruID.ExtractedData?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DocumentCaptureReportStep : Swift.Codable {
  public let status: TruID.StatusValue?
  public let report: TruID.DocumentCaptureReport?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Report : Swift.Codable {
  public let document_authenticity: TruID.ReportStep?
  public let document_capture: TruID.DocumentCaptureReportStep?
  public let face_liveness: TruID.ReportStep?
  public let id_to_selfie_matching: TruID.ReportStep?
  public let data_extraction: TruID.ReportStep?
  public let fingerprint_capture: TruID.ReportStep?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Configuration : Swift.Codable {
  public let config: [TruID.Config]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Config : Swift.Codable {
  public let path: Swift.String?
  public let type: Swift.String
  public let required: Swift.Bool?
  public let step_config: TruID.StepConfig?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct StepConfig : Swift.Codable {
  public let id_to_selfie_matching: Swift.Bool?
  public let extract_data: Swift.Bool?
  public let document_authenticity: Swift.Bool?
  public let document_backside_capture: Swift.Bool?
  public let finger_selection: Swift.Bool?
  public let passive_face_liveness: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Session : Swift.Codable, Swift.Identifiable {
  public let id: Swift.Int
  public let status: Swift.String?
  public let configuration: TruID.Configuration
  public typealias ID = Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SessionResult : Swift.Codable {
  public let id: Swift.Int
  public let report: TruID.Report?
  public let status: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_Concurrency.MainActor @preconcurrency public struct CardHelpScreen : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init()
  public typealias Body = @_opaqueReturnTypeOf("$s5TruID14CardHelpScreenV4bodyQrvp", 0) __
}
public enum FailureCases {
  case userCanceled
  case fallbackError
  case timedOut
  case jsonDecodingFailed
  case unableToAccessLocation
  case systemCanceled
  case noSessionResult
  case validationErrorFromServer
  case sessionExpired
  case cannotLoadModels
  case invalidConfiguration
  case notConnectedToInternet
  case noFlashLight
  case locationError
  public var message: Swift.String {
    get
  }
  public static func == (a: TruID.FailureCases, b: TruID.FailureCases) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor @preconcurrency public static let modelName: Swift.String
}
@_Concurrency.MainActor @preconcurrency public struct CardScreen : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s5TruID10CardScreenV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct FingerprintHelpScreen : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s5TruID21FingerprintHelpScreenV4bodyQrvp", 0) __
}
public protocol CGSizePreferenceKey : SwiftUICore.PreferenceKey where Self.Value == CoreFoundation.CGSize {
}
extension TruID.CGSizePreferenceKey {
  public static func reduce(value _: inout CoreFoundation.CGSize, nextValue: () -> CoreFoundation.CGSize)
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func onSizeChanged<Key>(_ key: Key.Type, perform action: @escaping (CoreFoundation.CGSize) -> Swift.Void) -> some SwiftUICore.View where Key : TruID.CGSizePreferenceKey
  
}
@_Concurrency.MainActor @preconcurrency public struct TruidMain : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(token: Swift.String, API_URL: Swift.String = "https://release-api.truid.ai", face_liveness: Swift.Bool = true, document_capture: Swift.Bool = true, extract_data: Swift.Bool = true, document_authenticity: Swift.Bool = true, document_backside_capture: Swift.Bool = true, id_to_selfie_matching: Swift.Bool = true, fingerprint_capture: Swift.Bool = true, fingerprint_selection: Swift.Bool = true, fingerprint_to_scan: TruID.FingersToScan = .RIGHT_4, enableHelpScreens: Swift.Bool = true, enableReportScreen: Swift.Bool = true, isTestAccount: Swift.Bool = false, themeColor: SwiftUICore.Color = Color(UIColor(red: 200/255, green: 100/255, blue: 200/255, alpha: 1.0)), success: @escaping (TruID.SessionResult) -> Swift.Void, failure: @escaping (TruID.FailureCases) -> Swift.Void)
  public typealias Body = @_opaqueReturnTypeOf("$s5TruID9TruidMainV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct FingerprintScreen : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s5TruID17FingerprintScreenV4bodyQrvp", 0) __
}
extension TruID.FingersToScan : Swift.Equatable {}
extension TruID.FingersToScan : Swift.Hashable {}
extension TruID.CardHelpScreen : Swift.Sendable {}
extension TruID.FailureCases : Swift.Equatable {}
extension TruID.FailureCases : Swift.Hashable {}
extension TruID.CardScreen : Swift.Sendable {}
extension TruID.FingerprintHelpScreen : Swift.Sendable {}
extension TruID.TruidMain : Swift.Sendable {}
extension TruID.FingerprintScreen : Swift.Sendable {}
